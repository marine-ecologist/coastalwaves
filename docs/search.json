[{"path":"https://marine-ecologist.github.io/coastalwaves/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 oceanwaves authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://marine-ecologist.github.io/coastalwaves/articles/theory.html","id":"wave-exposure-calculation","dir":"Articles","previous_headings":"","what":"Wave Exposure Calculation","title":"1. Wave theory","text":"function estimates two exposure metrics wind fetch: 1. Wind stress index (kN/m) Wind stress computed neutral 10 m wind UU (m s⁻¹): τ=0.001(1.1+0.035U)U2[Nm−2] \\tau = 0.001(1.1 + 0.035U)U^{2} \\quad [\\mathrm{N\\,m^{-2}}] fetch ray FF (m) projected along wind direction using cos⁡(θ)\\cos(\\theta). Daily site index : WindStresssite=∑(τ⋅F⋅cos⁡θ)/1000[kN/m] \\mathrm{WindStress}_{\\mathrm{site}} = \\sum (\\tau \\cdot F \\cdot \\cos\\theta)/1000 \\;\\; [\\mathrm{kN/m}] directional sums weighted sector width \\Delta\\theta results aren’t sensitive number bearings: total=∑(⋅)×Δθ360. \\text{total}=\\sum (\\cdot)\\times \\frac{\\Delta\\theta}{360}.","code":""},{"path":"https://marine-ecologist.github.io/coastalwaves/articles/theory.html","id":"wave-energy-flux-at-depth-h-jms","dir":"Articles","previous_headings":"Wave Exposure Calculation","what":"2. Wave energy flux at depth hh (J/m/s)","title":"1. Wave theory","text":"Initial deep-water HsH_s TT use SMB relations (USACE CEM): Hs0=0.283tanh⁡[(0.0125gF/U2)0.42]U2g H_{s0} = 0.283\\,\\tanh\\!\\big[(0.0125\\,gF/U^2)^{0.42}\\big]\\,\\frac{U^2}{g} T0=7.54tanh⁡[(0.077gF/U2)0.25]Ug T_{0} = 7.54\\,\\tanh\\!\\big[(0.077\\,gF/U^2)^{0.25}\\big]\\,\\frac{U}{g} adjusted site depth hh using linear wave theory: Solve dispersion: ω2=gktanh⁡(kh)\\omega^2 = gk\\tanh(kh), ω=2π/T0\\omega=2\\pi/T_0 Group velocity: Cg=nCC_g = nC, n=12(1+2kh/sinh⁡(2kh))n = \\tfrac12\\big(1+2kh/\\sinh(2kh)\\big) Shoaling: Ks=Cg,deep/CgK_s = \\sqrt{C_{g,\\mathrm{deep}}/C_g}, Cg,deep=gT0/(4π)C_{g,\\mathrm{deep}}=gT_0/(4\\pi) Depth limit: Hs=min⁡(Hs0Ks,0.42h).H_s=\\min\\!\\big(H_{s0}K_s,\\;0.42\\,h\\big). Wave energy flux: P=18ρgHs2Cg[J/m/s] P = \\tfrac18\\,\\rho g H_s^2 C_g \\;\\; [\\mathrm{J/m/s}] Daily totals sum across bearings; mean time average. Notes 1 SMB (Sverdrup–Munk–Bretschneider) wind-wave growth method classical, empirical set fetch-duration-limited relationships estimate deep-water significant wave height characteristic period steady 10-m wind. SMB assumes steady, uniform wind straight fetch, currents, deep water; nearshore effects (shoaling, breaking, bottom friction) require subsequent linear-wave transforms (dispersion, C_g, shoaling K_s, depth-limit H/h\\le 0.78). References: - U.S. Army Corps Engineers (2002). Coastal Engineering Manual (EM 1110-2-1100). - Ekebom J, Laihonen P, Suominen T (2003). Estuarine, Coastal Shelf Science 57:887-898.","code":""},{"path":"https://marine-ecologist.github.io/coastalwaves/articles/wind.html","id":"get_wind_data","dir":"Articles","previous_headings":"","what":"get_wind_data","title":"3. Extracting wind timeseries","text":"get_wind_data extracts daily Sea Surface Wind data NOAA NCEI blended daily averaged 0.25° (1987-recent) metres per second (m s⁻¹).","code":"#library(coastalwaves) library(tidyverse) library(dhw) library(sf) library(lubridate)  gbr_shape <- download_gbr_spatial(return = \"base\") |>   select(LOC_NAME_S, X_COORD, Y_COORD) |>    st_make_valid() |>    st_transform(20353)  ### Grep subset for target reefs, create union fn_ribbons <- gbr_shape |>    filter(grepl(\"12-032|12-037|12-038|12-032|12-031\", LOC_NAME_S))  ### get data fn_ribbons_wind <- get_wind_data(fn_ribbons, \"2000-01-01\", \"2000-03-31\") |>   mutate(date = as.POSIXct(date, format = \"%Y-%m-%d %H:%M:%S\", tz = \"UTC\"))  ### plot ggplot(fn_ribbons_wind) +   geom_line(aes(x = date, y = windspeed_ms)) +   geom_point(aes(x = date, y = windspeed_ms)) +   labs(x = \"Date\", y = \"Wind speed (m/s)\") +   theme_bw()"},{"path":"https://marine-ecologist.github.io/coastalwaves/articles/wind.html","id":"get_weather_data","dir":"Articles","previous_headings":"","what":"get_weather_data","title":"3. Extracting wind timeseries","text":"get_weather_data extracts data list Weather Underground stations knots:","code":"#library(oceanwaves) library(tidyverse) library(dhw) library(sf) library(lubridate)  # create an sf point for the Whitsundays area # create an sf point for the Whitsundays area  whits <- st_point(c(148, -20)) |> st_sfc(crs = 4326) |> st_sf()  whitsundays_weather <- get_wind_data(     sf_obj = whits,     start_date = \"2024-11-01\",     end_date = \"2024-12-31\" ) %>%   mutate(date = as.POSIXct(date, format = \"%Y-%m-%d %H:%M:%S\", tz = \"UTC\"))  ggplot(whitsundays_weather) +   geom_line(aes(x = date, y = windspeed_ms)) +   geom_point(aes(x = date, y = windspeed_ms)) +   labs(x = \"Date\", y = \"Wind speed (m/s)\") +   theme_bw()"},{"path":[]},{"path":"https://marine-ecologist.github.io/coastalwaves/articles/workflow.html","id":"import-spatial-data","dir":"Articles","previous_headings":"1. Import data:","what":"Import spatial data","title":"2. coastalwaves workflow","text":"Using Great Barrier Reef sf file, identify polygons wave mapping (Hook Hayman reefs)  Create outer boundary surrounding outer reef / island boundaries (land-sea interface) calculate wave energy:  Finally, extract broader seascape surrounding target polygons interest:","code":"#library(coastalwaves) library(dhw) library(sf) library(tidyverse) library(lubridate) library(ggplot2)   ### download GBR shape file gbr_shape <- download_gbr_spatial(return = \"base\") |>   select(LOC_NAME_S, X_COORD, Y_COORD) |>    st_make_valid() |>    st_transform(20353)   ### Grep subset for target reefs whitsundays <- gbr_shape |>    filter(grepl(\"Hook|Hayman|reef\", LOC_NAME_S)) |>    filter(grepl(\"20\", LOC_NAME_S)) |>    mutate(habitat = if_else(!grepl(\"Reef\", LOC_NAME_S), \"island\", \"reef\"))  ggplot() + theme_bw() +   geom_sf(data=whitsundays, aes(fill=habitat), show.legend=FALSE) +   scale_fill_manual(values = c(\"island\" = \"#ffffc0\", \"reef\" = \"#e6f8ff\")) whitsundays_union <- whitsundays |>   st_union() |>   st_boundary() |>   st_cast(\"LINESTRING\")    ggplot() + theme_bw() +   geom_sf(data=whitsundays, aes(fill=habitat), show.legend=FALSE) +   scale_fill_manual(values = c(\"island\" = \"#ffffc0\", \"reef\" = \"#e6f8ff\")) +   geom_sf(data=whitsundays_union, show.legend=FALSE, linewidth=2) ### extract broader region for fetch (50km from focus reefs) whitsundays_region <- st_crop(gbr_shape,                                whitsundays |>                                 st_union() |>                                  st_centroid() |>                                  st_buffer(20000))  ggplot() + theme_bw() +   geom_sf(data=whitsundays_region, fill=\"white\") +   geom_sf(data=whitsundays, aes(fill=habitat), show.legend=FALSE) +   scale_fill_manual(values = c(\"island\" = \"#ffffc0\", \"reef\" = \"#e6f8ff\"))"},{"path":"https://marine-ecologist.github.io/coastalwaves/articles/workflow.html","id":"import-weather-data","dir":"Articles","previous_headings":"1. Import data:","what":"Import weather data","title":"2. coastalwaves workflow","text":"get_weather_data() function extracts wind data (speed, bearing) Weather Underground (requires API key access). test functionality , extract dates around Nov/Dec spawning window past 2 years plot check timeseries (plot 3-hrly averages)","code":"# spawning_dates <- seq(ymd(\"2018-11-01\"), ymd(\"2024-12-31\"), by = \"day\") %>% #   keep(~ month(.) %in% c(11, 12)) %>% #   format(\"%Y%m%d\") #  # whitsundays_weather <- get_weather_data(stations=\"ISHUTE4\", daterange = spawning_dates, apikey=\"5cada843ef8e4f39ada843ef8e4f392d\") whitsundays_weather <- readRDS(\"/Users/rof011/coastalwaves/data/whitsundays_weather.rds\")  bearingplot <- whitsundays_weather |>     mutate(time = ymd_hms(time)) |>    mutate(year = as.factor(year(date))) |>    mutate(time_3hr = lubridate::floor_date(time, unit = \"3 hours\")) |>    group_by(time_3hr, year) |>    summarise(     speed = max(windspeed_ms, na.rm = TRUE),     bearing = mean(bearing, na.rm = TRUE),     .groups = \"drop\"   ) |>     ggplot() + theme_bw() +   facet_wrap(~year, scales=\"free\", nrow=2) +   scale_y_continuous(limits=c(0,359), breaks=seq(0,360,90)) +   geom_line(aes(x = time_3hr, y = bearing, color=year), show.legend=FALSE) +   labs(x = \"Time (3-hourly)\", y = \"Bearing\", title = \"3-Hourly Average Wind Bearing\")   speedplot <- whitsundays_weather |>     mutate(time = ymd_hms(time)) |>    mutate(year = as.factor(year(date))) |>    mutate(time_3hr = lubridate::floor_date(time, unit = \"3 hours\")) |>    group_by(time_3hr, year) |>    summarise(     speed = max(windspeed_ms, na.rm = TRUE),     bearing = mean(bearing, na.rm = TRUE),     .groups = \"drop\"   ) |>     ggplot() + theme_bw() +   scale_y_continuous(limits=c(0,25)) +   facet_wrap(~year, scales=\"free\", nrow=2) +   geom_line(aes(x = time_3hr, y = speed, color=year), show.legend=FALSE) +   labs(x = \"Time (3-hourly)\", y = \"speed\", title = \"3-Hourly Average Wind Speed\")   library(patchwork) speedplot + bearingplot whitsundays_daily <- whitsundays_weather %>%   filter(lubridate::month(date) == 11) %>%       # keep only November   group_by(date) %>%   summarise(     bearing = mean(bearing, na.rm = TRUE),     windspeed_ms = mean(windspeed_ms, na.rm = TRUE),     .groups = \"drop\" )"},{"path":"https://marine-ecologist.github.io/coastalwaves/articles/workflow.html","id":"calculate-points","dir":"Articles","previous_headings":"","what":"2. Calculate points","title":"2. coastalwaves workflow","text":"Generate series points along boundaries calculate fetch (spacing metres):","code":"whitsundays_points <- calculate_points(whitsundays_union, 20)  ### plots below  library(patchwork)  pinnacle <- st_bbox(c(xmin=148.962, xmax=148.968, ymin=-20.063, ymax=-20.058), crs=4326) |> st_transform(20353) pinnacle_sf <- st_as_sfc(pinnacle) |> st_sf()   main <- ggplot() + theme_bw() +   geom_sf(data=whitsundays, aes(fill=habitat), show.legend=FALSE) +   scale_fill_manual(values = c(\"island\" = \"#ffffc0\", \"reef\" = \"#e6f8ff\")) +    geom_sf(data = whitsundays_points, shape=21, size=0.2) +   geom_sf(data = pinnacle_sf, fill=NA, color=\"red\", linewidth=1) +   ggtitle(\"Whitsundays\")    inset <- ggplot() + theme_bw() +   geom_sf(data=whitsundays |> st_crop(pinnacle), aes(fill=habitat), show.legend=FALSE, bbox=pinnacle) +   scale_fill_manual(values = c(\"island\" = \"#ffffc0\", \"reef\" = \"#e6f8ff\")) +   geom_sf(data = whitsundays_points |> st_crop(pinnacle), shape=21, size=1, bbox=pinnacle) +   geom_sf(data = pinnacle_sf, fill=NA, color=\"red\", linewidth=1) +   ggtitle(\"inset Pinnacle Bay\")  main | inset"},{"path":"https://marine-ecologist.github.io/coastalwaves/articles/workflow.html","id":"calculate-fetch","dir":"Articles","previous_headings":"","what":"3. Calculate fetch","title":"2. coastalwaves workflow","text":"point calculate bearings corresponding fetch length (20km)","code":"whitsundays_fetch <- calculate_fetch(point = whitsundays_points,                                       degrees = 7.5,                                       fetch = 20000,                                       land = whitsundays_region,                                       parallel = TRUE,                                       cores = 8)  ggplot() + theme_bw() +   geom_sf(data = whitsundays, aes(fill=habitat), show.legend=FALSE) +   scale_fill_manual(values = c(\"island\" = \"#ffffc0\", \"reef\" = \"#e6f8ff\")) +    geom_sf(data = whitsundays_fetch |> filter(id %in% sample(whitsundays_fetch$id, 5)), linewidth=0.2, show.legend=FALSE)"},{"path":"https://marine-ecologist.github.io/coastalwaves/articles/workflow.html","id":"calculate-wave-energy","dir":"Articles","previous_headings":"","what":"4. Calculate wave energy","title":"2. coastalwaves workflow","text":"","code":"whitsundays_waves <- calculate_wave_exposure(wind = whitsundays_daily,                                       fetch = whitsundays_fetch,                                       points = whitsundays_points,                                       parallel = TRUE,                                       cores = 8)    main_circles <- ggplot() + theme_bw() +   geom_sf(     data = whitsundays,     aes(fill = habitat),     color = \"black\",     linewidth=0.1,     show.legend=FALSE   ) +   scale_fill_manual(values = c(\"island\" = \"#ffffc0\", \"reef\" = \"#e6f8ff\")) +   ggnewscale::new_scale_fill() +   geom_sf(data = whitsundays_waves, aes(fill = wave_energy_total),            show.legend=FALSE, shape = 21, size = 3, stroke=0.1) +   scale_fill_distiller(palette = \"RdYlBu\", guide = guide_colorbar(title = \"Wave Energy\")) +   theme(axis.text.x = element_text(angle = 45, hjust = 1)) +   geom_sf(data = pinnacle_sf, fill=NA, color=\"red\", linewidth=1)   inset_circles <- ggplot() + theme_bw() +   geom_sf(     data = whitsundays|> st_crop(pinnacle),     aes(fill = habitat),     color = \"black\",     linewidth=0.1   ) +   scale_fill_manual(values = c(\"island\" = \"#ffffc0\", \"reef\" = \"#e6f8ff\")) +   ggnewscale::new_scale_fill() +   geom_sf(data = whitsundays_waves|> st_crop(pinnacle), aes(fill = wave_energy_total), shape = 21, size = 3, stroke=0.1) +   scale_fill_distiller(palette = \"RdYlBu\", guide = guide_colorbar(title = \"Wave Energy\")) +   theme(axis.text.x = element_text(angle = 45, hjust = 1)) +   geom_sf(data = pinnacle_sf, fill=NA, color=\"red\", linewidth=1)    main_circles | inset_circles"},{"path":"https://marine-ecologist.github.io/coastalwaves/articles/workflow.html","id":"calculate-wave-grid","dir":"Articles","previous_headings":"","what":"4. Calculate wave grid","title":"2. coastalwaves workflow","text":"References • Large, W.G. & Pond, S. (1981). Open ocean momentum flux measurements moderate strong winds. J. Phys. Oceanogr. 11, 324–336. • Keddy, P.. (1982). Quantifying within-lake gradients wave energy: Interrelationships wave energy, substrate particle size shoreline plants. Aquatic Botany 14, 41–58. • U.S. Army Corps Engineers (2002). Coastal Engineering Manual (CEM), EM 1110-2-1100. Washington, DC. • Komar, P.D. (1998). Beach Processes Sedimentation (2nd ed.). Prentice Hall.","code":"wave_grid <- create_wave_grid(whitsundays_union, whitsundays_waves, interval = 20, width = 20)    main_grid <- ggplot() + theme_bw() +   geom_sf(     data = whitsundays,     aes(fill = habitat),     color = \"black\",     linewidth=0.1,     show.legend=FALSE   ) +   scale_fill_manual(values = c(\"island\" = \"#ffffc0\", \"reef\" = \"#e6f8ff\")) +   ggnewscale::new_scale_fill() +   geom_sf(data = wave_grid, aes(fill = wave_energy_total),            show.legend=FALSE, shape = 21, size = 3, linewidth=0.1) +   scale_fill_distiller(palette = \"RdYlBu\", guide = guide_colorbar(title = \"Wave Energy\")) +   theme(axis.text.x = element_text(angle = 45, hjust = 1)) +   geom_sf(data = pinnacle_sf, fill=NA, color=\"red\", linewidth=1)   inset_grid <- ggplot() + theme_bw() +   geom_sf(     data = whitsundays|> st_crop(pinnacle),     aes(fill = habitat),     color = \"black\",     linewidth=0.1   ) +   scale_fill_manual(values = c(\"island\" = \"#ffffc0\", \"reef\" = \"#e6f8ff\")) +   ggnewscale::new_scale_fill() +   geom_sf(data = wave_grid|> st_crop(pinnacle), aes(fill = wave_energy_total), shape = 21, size = 3, linewidth=0.1) +   scale_fill_distiller(palette = \"RdYlBu\", guide = guide_colorbar(title = \"Wave Energy\")) +   theme(axis.text.x = element_text(angle = 45, hjust = 1)) +   geom_sf(data = pinnacle_sf, fill=NA, color=\"red\", linewidth=0.5)    main_grid | inset_grid"},{"path":"https://marine-ecologist.github.io/coastalwaves/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"George Roff. Author, maintainer.","code":""},{"path":"https://marine-ecologist.github.io/coastalwaves/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Roff G (2025). coastalwaves: Calculate Fetch-Derived Coastal Waves. R package version 0.2.0, https://github.com/marine-ecologist/coastalwaves, https://marine-ecologist.github.io/coastalwaves/.","code":"@Manual{,   title = {coastalwaves: Calculate Fetch-Derived Coastal Waves},   author = {George Roff},   year = {2025},   note = {R package version 0.2.0, https://github.com/marine-ecologist/coastalwaves},   url = {https://marine-ecologist.github.io/coastalwaves/}, }"},{"path":"https://marine-ecologist.github.io/coastalwaves/index.html","id":"coastalwaves-","dir":"","previous_headings":"","what":"Calculate Fetch-Derived Coastal Waves","title":"Calculate Fetch-Derived Coastal Waves","text":"coastalwaves development R package designed simulating wave exposure wind fetch along complex coastlines. provides tools compute directional fetch, model wave energy based wind speed duration, visualize exposure patterns across marine landscapes. Built compatibility spatial workflows (sf, terra) marine applications, coastalwaves aims facilitate mapping fine-scale hydrodynamic forcing reefs, islands, coastal habitats using simple, reproducible methods.","code":""},{"path":"https://marine-ecologist.github.io/coastalwaves/reference/calculate_fetch.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Fetch Lengths from Points Using Radiating Bearings — calculate_fetch","title":"Calculate Fetch Lengths from Points Using Radiating Bearings — calculate_fetch","text":"function generates rays input points specified angular intervals, clips land polygons, calculates effective fetch length (open-water distance) direction. Optionally runs parallel.","code":""},{"path":"https://marine-ecologist.github.io/coastalwaves/reference/calculate_fetch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Fetch Lengths from Points Using Radiating Bearings — calculate_fetch","text":"","code":"calculate_fetch(   points,   degrees,   fetch = 5000,   land,   parallel = TRUE,   cores = 9 )"},{"path":"https://marine-ecologist.github.io/coastalwaves/reference/calculate_fetch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Fetch Lengths from Points Using Radiating Bearings — calculate_fetch","text":"points sf object type POINT column id. degrees Numeric. Angular spacing bearings (e.g., 7.5, 10). fetch Numeric. Maximum fetch distance meters. Default 5000. land sf object representing land polygons (must overlap rays). parallel Logical. TRUE, uses furrr::future_map_dfr parallel execution. cores Integer. Number cores use parallel = TRUE.","code":""},{"path":"https://marine-ecologist.github.io/coastalwaves/reference/calculate_fetch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Fetch Lengths from Points Using Radiating Bearings — calculate_fetch","text":"sf object id, bearing, segment_id, geometry, length_km columns.","code":""},{"path":"https://marine-ecologist.github.io/coastalwaves/reference/calculate_fetch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Fetch Lengths from Points Using Radiating Bearings — calculate_fetch","text":"Rays generated degrees intervals around compass. Rays clipped land polygons estimate open-water fetch. Fetch measured remaining ray segment length clipping land.","code":""},{"path":"https://marine-ecologist.github.io/coastalwaves/reference/calculate_fetch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Fetch Lengths from Points Using Radiating Bearings — calculate_fetch","text":"","code":"if (FALSE) { # \\dontrun{   future::plan(multisession, workers = 4)   fetch_data <- calculate_fetch(my_points, degrees = 10, fetch = 5000, land = gbr_land, parallel = TRUE) } # }"},{"path":"https://marine-ecologist.github.io/coastalwaves/reference/calculate_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Regularly Spaced Points Along Lines — calculate_points","title":"Generate Regularly Spaced Points Along Lines — calculate_points","text":"function takes LINESTRING MULTILINESTRING sf object returns regularly spaced points along line specified interval.","code":""},{"path":"https://marine-ecologist.github.io/coastalwaves/reference/calculate_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Regularly Spaced Points Along Lines — calculate_points","text":"","code":"calculate_points(input, interval)"},{"path":"https://marine-ecologist.github.io/coastalwaves/reference/calculate_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Regularly Spaced Points Along Lines — calculate_points","text":"input sf object type LINESTRING MULTILINESTRING. interval Numeric. Distance points along line (CRS units).","code":""},{"path":"https://marine-ecologist.github.io/coastalwaves/reference/calculate_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Regularly Spaced Points Along Lines — calculate_points","text":"sf object POINT geometries id column.","code":""},{"path":"https://marine-ecologist.github.io/coastalwaves/reference/calculate_points.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Regularly Spaced Points Along Lines — calculate_points","text":"","code":"# lines <- st_read(\"coastline.gpkg\") # pts <- calculate_points(lines, interval = 500) # plot(pts)"},{"path":"https://marine-ecologist.github.io/coastalwaves/reference/calculate_wave_exposure.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Wind Stress (kN/m) and Wave Energy Flux at Specified Depth (J/m/s) — calculate_wave_exposure","title":"Calculate Wind Stress (kN/m) and Wave Energy Flux at Specified Depth (J/m/s) — calculate_wave_exposure","text":"Computes two site-level exposure metrics wind time series fetch geometry: Wind stress index: wind stress projected along fetch rays (kN/m). Wave energy flux depth h: SMB-based offshore waves corrected user depth (J/m/s).","code":""},{"path":"https://marine-ecologist.github.io/coastalwaves/reference/calculate_wave_exposure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Wind Stress (kN/m) and Wave Energy Flux at Specified Depth (J/m/s) — calculate_wave_exposure","text":"","code":"calculate_wave_exposure(   wind,   fetch,   points,   depth = 20,   parallel = TRUE,   cores = 9 )"},{"path":"https://marine-ecologist.github.io/coastalwaves/reference/calculate_wave_exposure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Wind Stress (kN/m) and Wave Energy Flux at Specified Depth (J/m/s) — calculate_wave_exposure","text":"wind Data frame columns date, bearing, windspeed_ms. fetch sf id, bearing, length_km calculate_fetch. points sf id column join results. depth Numeric. Water depth m (default 20). parallel Logical. Use furrr parallel computation. cores Integer. Number workers.","code":""},{"path":"https://marine-ecologist.github.io/coastalwaves/reference/calculate_wave_exposure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Wind Stress (kN/m) and Wave Energy Flux at Specified Depth (J/m/s) — calculate_wave_exposure","text":"sf : wind_stress_total Total wind stress × fetch (kN/m). wind_stress_mean Mean daily wind stress × fetch (kN/m). wave_energy_total Total wave energy flux depth (J/m). wave_energy_mean Mean daily wave energy flux depth (J/m/s).","code":""},{"path":"https://marine-ecologist.github.io/coastalwaves/reference/create_wave_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Wave Exposure Grid Polygons — create_wave_grid","title":"Create Wave Exposure Grid Polygons — create_wave_grid","text":"function builds unstructured grid polygons along reef/shoreline line, joins wave exposure metrics polygons, returns grid ready mapping.","code":""},{"path":"https://marine-ecologist.github.io/coastalwaves/reference/create_wave_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Wave Exposure Grid Polygons — create_wave_grid","text":"","code":"create_wave_grid(line, waves, interval = 50, width = 50)"},{"path":"https://marine-ecologist.github.io/coastalwaves/reference/create_wave_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Wave Exposure Grid Polygons — create_wave_grid","text":"line sf sfc LINESTRING object representing reef shoreline boundary. waves sf object returned calculate_wave_exposure() containing wave metrics points. interval Numeric. Spacing sample points along line (map units, e.g. meters). width Numeric. Total buffer width around line (map units, e.g. meters).","code":""},{"path":"https://marine-ecologist.github.io/coastalwaves/reference/create_wave_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Wave Exposure Grid Polygons — create_wave_grid","text":"sf polygon grid wave metrics columns joined.","code":""},{"path":"https://marine-ecologist.github.io/coastalwaves/reference/create_wave_grid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Wave Exposure Grid Polygons — create_wave_grid","text":"Points sampled along input line interval spacing. Voronoi tessellation created points clipped corridor width wide. polygon assigned wave metrics nearest sampled point.","code":""},{"path":"https://marine-ecologist.github.io/coastalwaves/reference/create_wave_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Wave Exposure Grid Polygons — create_wave_grid","text":"","code":"if (FALSE) { # \\dontrun{ grid <- create_wave_grid(whitsundays_union, whitsundays_waves, interval = 50, width = 20) } # }"},{"path":"https://marine-ecologist.github.io/coastalwaves/reference/get_weather_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Download and process Weather Underground PWS wind data — get_weather_data","title":"Download and process Weather Underground PWS wind data — get_weather_data","text":"Download process Weather Underground PWS wind data","code":""},{"path":"https://marine-ecologist.github.io/coastalwaves/reference/get_weather_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download and process Weather Underground PWS wind data — get_weather_data","text":"","code":"get_weather_data(stations, startdate, enddate, daterange = NULL, apikey)"},{"path":"https://marine-ecologist.github.io/coastalwaves/reference/get_weather_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download and process Weather Underground PWS wind data — get_weather_data","text":"stations Character vector station IDs (e.g. \"ISHUTE4\") startdate Start date (string \"YYYY-MM-DD\" format) enddate End date (string \"YYYY-MM-DD\" format) daterange Optional precomputed vector dates \"YYYYMMDD\" format apikey Weather Underground API key","code":""},{"path":"https://marine-ecologist.github.io/coastalwaves/reference/get_weather_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download and process Weather Underground PWS wind data — get_weather_data","text":"tibble columns: time, bearing, speed (km/h), windspeedAvg_knots","code":""},{"path":"https://marine-ecologist.github.io/coastalwaves/reference/get_wind_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Download NOAA Blended Daily Winds for an sf bounding box — get_wind_data","title":"Download NOAA Blended Daily Winds for an sf bounding box — get_wind_data","text":"function queries NOAA CoastWatch ERDDAP noaacwBlendedWindsDaily dataset u_wind v_wind components bounding box input sf object specified date range.","code":""},{"path":"https://marine-ecologist.github.io/coastalwaves/reference/get_wind_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download NOAA Blended Daily Winds for an sf bounding box — get_wind_data","text":"","code":"get_wind_data(sf_obj, start_date, end_date, zlev = 10)"},{"path":"https://marine-ecologist.github.io/coastalwaves/reference/get_wind_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download NOAA Blended Daily Winds for an sf bounding box — get_wind_data","text":"sf_obj sf object. bounding box (st_bbox) used define spatial extent (latitude longitude). start_date Character string, start date \"YYYY-MM-DD\" format. end_date Character string, end date \"YYYY-MM-DD\" format. zlev Numeric, vertical level meters. Default = 10.0.","code":""},{"path":"https://marine-ecologist.github.io/coastalwaves/reference/get_wind_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download NOAA Blended Daily Winds for an sf bounding box — get_wind_data","text":"data.frame requested wind data (u_wind, v_wind, time, latitude, longitude, derived wind_speed wind_bearing).","code":""},{"path":"https://marine-ecologist.github.io/coastalwaves/reference/get_wind_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download NOAA Blended Daily Winds for an sf bounding box — get_wind_data","text":"function constructs direct ERDDAP CSV request URL downloads u_wind v_wind variables given spatial temporal extent. Results returned data frame additional columns: wind_speed Wind speed m/s calculated \\(\\sqrt{u^2 + v^2}\\) wind_bearing Wind direction degrees clockwise north, derived atan2(u, v).","code":""},{"path":"https://marine-ecologist.github.io/coastalwaves/reference/get_wind_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download NOAA Blended Daily Winds for an sf bounding box — get_wind_data","text":"","code":"if (FALSE) { # \\dontrun{ library(sf) pt <- st_point(c(144, -11)) |>   st_sfc(crs = 4326) |>   st_sf()  wind_df <- get_wind_data(   pt,   start_date = \"1988-09-01\",   end_date   = \"1988-09-03\" ) head(wind_df) } # }"}]
